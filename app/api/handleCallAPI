import { getCsrfToken, getSession } from "next-auth/react";

const BASE_URL = process.env.BASE_URL_API;

export async function handleGet(url, params) {
    console.log(BASE_URL);
    const csrfToken = await getCsrfToken();
    console.log(csrfToken);
    const session = await getSession();
    console.log(session);
    if (!csrfToken || !session) {
        return { error: "User not authenticated" };
    }

    // Prepare parameters to be sent on the get call
    let paramsString = "?";
    if (params) {
        for (const [key, value] of Object.entries(params)) {
            paramsString += `${key}=${value}&`;
        }
        paramsString = paramsString.slice(0, -1);
    }

    try {
        const response = await fetch(BASE_URL + url + paramsString, {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "X-CSRFToken": csrfToken,
                Authorization: "Bearer " + session?.user?.email,
            },
        });

        if (response.ok) {
            const responseData = await response.json();
            return responseData;
        } else {
            return { error: "Failed to make the GET request." };
        }
    } catch (error) {
        return { error: "An error occurred while making the GET request." };
    }
}

export async function handleAPI(url, data, method) {
    const csrfToken = await getCsrfToken();
    console.log(csrfToken);
    const session = await getSession();
    console.log(session);
    if (!csrfToken || !session) {
        return { error: "User not authenticated" };
    }

    try {
        const response = await fetch(BASE_URL + url, {
            method: method,
            headers: {
                "Content-Type": "application/json",
                "X-CSRFToken": csrfToken,
                Authorization: "Bearer " + session?.user?.email,
            },
            body: JSON.stringify(data),
        });

        if (response.ok) {
            const responseData = await response.json();
            return responseData;
        } else {
            return { error: "Failed to make the POST request." };
        }
    } catch (error) {
        return { error: "An error occurred while making the POST request." };
    }
}
